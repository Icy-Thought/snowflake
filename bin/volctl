#!/usr/bin/env python3

import argparse
import re
import subprocess
import time
import os


class VolumeControl:
    ICONS = ["󰖁 ", "󰖀 ", "󰕾 ", " "]
    STATUS_FILE = "/tmp/volctl-window-status.txt"

    def __init__(self):
        self.volume_status_cache = self.get_volume_status_all()
        self.symbol = self.get_icon(self.volume_status_cache["volume"])
        if not os.path.exists(self.STATUS_FILE):
            with open(self.STATUS_FILE, "w") as window_volStat:
                window_volStat.write("False")

    def get_volume_status_all(self):
        get_volume = subprocess.run(
            ["wpctl", "get-volume", "@DEFAULT_AUDIO_SINK@"],
            stdout=subprocess.PIPE,
            universal_newlines=True,
        )
        parsed_volume = get_volume.stdout.strip()
        volume_level = float(re.sub("[^0-9.]", "", parsed_volume))
        is_muted = bool(re.search(r"\bMUTED\b", parsed_volume))
        window_muted = self.read_window_mute_status()
        return {
            "volume": int(volume_level * 100),
            "mute": is_muted,
            "window-mute": window_muted,
        }

    def read_window_mute_status(self):
        with open(self.STATUS_FILE, "r") as window_volStat:
            return window_volStat.read().strip() == "True"

    def write_window_mute_status(self, status):
        with open(self.STATUS_FILE, "w") as window_volStat:
            window_volStat.write(str(status))

    def get_volume_status(self, status):
        if status in self.volume_status_cache:
            return self.volume_status_cache[status]
        return None

    def get_icon(self, percentage):
        if percentage <= 30:
            return self.ICONS[1]
        elif 30 < percentage <= 70:
            return self.ICONS[2]
        elif percentage > 70:
            return self.ICONS[3]
        else:
            return ""

    def notify(self, icon: str, message: str, volume: str):
        return subprocess.run(
            [
                "notify-send",
                icon + message + volume + "%",
                "-t",
                "500",
                "-h",
                "string:synchronous:volume",
                "-h",
                "int:value:" + volume,
                "-u",
                "low",
            ]
        )

    def wireplumber_cli(self, args):
        subprocess.run(["wpctl"] + args)

    def control_volume_level(self, args):
        windowID = subprocess.check_output(["xdotool", "getactivewindow"]).strip()
        xprop_output = subprocess.check_output(
            ["xprop", "_NET_WM_PID", "-id", windowID]
        ).decode()
        PID = re.search(r"[0-9]+", xprop_output).group(0)
        mute_window_cmd = ["set-mute", "-p", PID, "toggle"]

        mute_cmd = ["set-mute", "@DEFAULT_AUDIO_SINK@", "toggle"]
        volume_cmd = ["set-volume", "@DEFAULT_AUDIO_SINK@"]

        if args.command == "toggle-mute":
            self.wireplumber_cli(mute_cmd)
        elif args.command == "toggle-window-mute":
            self.wireplumber_cli(mute_window_cmd)
            current_window_mute_status = not self.get_volume_status("window-mute")
            self.write_window_mute_status(current_window_mute_status)
            self.volume_status_cache["window-mute"] = current_window_mute_status
        elif args.command == "increase":
            volume_cmd.append(str(args.level) + "%+")
            self.wireplumber_cli(volume_cmd)
        elif args.command == "decrease":
            volume_cmd.append(str(args.level) + "%-")
            self.wireplumber_cli(volume_cmd)

        self.volume_status_cache = self.get_volume_status_all()
        self.symbol = self.get_icon(self.volume_status_cache["volume"])

        # Create notification after adjusting the volume/mute status
        if args.command == "toggle-mute" and self.get_volume_status("mute"):
            self.notify(self.ICONS[0], "Muted Volume: ", "0")
        elif args.command == "toggle-window-mute" and self.get_volume_status(
            "window-mute"
        ):
            self.notify(self.ICONS[0], "Muted Window: ", "0")
        else:
            self.notify(
                self.symbol, "Volume Level: ", str(self.get_volume_status("volume"))
            )

    def volume_status(self, args):
        if args.command == "status":
            while True:
                print(self.symbol + str(self.get_volume_status("volume")) + "%")
                time.sleep(60)
        else:
            return


def main():
    parser = argparse.ArgumentParser(
        prog="Audio Volume Control",
        description="A simple script to help control the volume levels of the audio transmitted by your hardware device(s)!",
        epilog="Please, try again.",
    )

    subparser = parser.add_subparsers(dest="command")

    increase = subparser.add_parser("increase")
    decrease = subparser.add_parser("decrease")
    mute = subparser.add_parser("toggle-mute")
    mute_window = subparser.add_parser("toggle-window-mute")
    status = subparser.add_parser("status")

    increase.add_argument(
        "-l",
        "--level",
        type=int,
        default=5,
        help="Increase audio volume levels by +x%. (default: +%(default)%)",
    )

    decrease.add_argument(
        "-l",
        "--level",
        type=int,
        default=5,
        help="Decrease audio volume levels by -x%. (default: -%(default)%)",
    )

    args = parser.parse_args()
    volctl = VolumeControl()

    volctl.control_volume_level(args)
    volctl.volume_status(args)


if __name__ == "__main__":
    main()
