#!/usr/bin/env python3

import argparse
import re
import subprocess
import time

parser = argparse.ArgumentParser(
    prog="Audio Volume Control",
    description="A simple script to help control the volume levels of the audio transmitted by your hardware device(s)!",
    epilog="Please, try again.",
)

subparser = parser.add_subparsers(dest="command")

increase = subparser.add_parser("increase")
decrease = subparser.add_parser("decrease")
mute = subparser.add_parser("toggle-mute")
status = subparser.add_parser("status")

increase.add_argument(
    "-l",
    "--level",
    type=int,
    default=5,
    help="Increase audio volume levels by +x%. (default: +%(default)%)",
)

decrease.add_argument(
    "-l",
    "--level",
    type=int,
    default=5,
    help="Decrease audio volume levels by -x%. (default: -%(default)%)",
)

mute.add_argument(
    "-t",
    "--toggle-mute",
    action="store_true",
    help="Toggle mute for device audio system. (default: False)",
)

args = parser.parse_args()

get_volume = subprocess.run(
    ["wpctl", "get-volume", "@DEFAULT_AUDIO_SINK@"],
    stdout=subprocess.PIPE,
    universal_newlines=True,
)
parsed_volume = get_volume.stdout.strip()

volume_level = float(re.sub("[^0-9|.]", "", parsed_volume))
is_muted = bool(re.search(r"\bMUTED\b", parsed_volume))

percentage = int(volume_level * 100)
LEVEL = ["󰖁 ", "󰖀 ", "󰕾 ", " "]

if args.command == "toggle-mute" and not is_muted:
    ICON = LEVEL[0]
elif percentage <= 30:
    ICON = LEVEL[1]
elif 30 < percentage <= 70:
    ICON = LEVEL[2]
elif percentage > 70:
    ICON = LEVEL[3]
else:
    ICON = ""


def notify(icon: str, message: str, volume: str):
    return subprocess.run(
        [
            "notify-send",
            icon + message + volume + "%",
            "-t",
            "500",
            "-h",
            "string:synchronous:volume",
            "-h",
            "int:value:" + volume,
            "-u",
            "low",
        ]
    )


if args.command == "toggle-mute" and not is_muted:
    notify(ICON, "Muted Volume: ", "0")
elif args.command == "increase":
    notify(ICON, "Volume Level: ", str(percentage + args.level))
elif args.command == "decrease":
    notify(ICON, "Volume Level: ", str(percentage - args.level))
else:
    notify(ICON, "Volume Level: ", str(percentage))


def wireplumber_cli(args: list[str]):
    subprocess.run(["wpctl"] + args)


def control_volume_level():
    mute_cmd = ["set-mute", "@DEFAULT_AUDIO_SINK@", "toggle"]
    volume_cmd = ["set-volume", "@DEFAULT_AUDIO_SINK@"]

    if args.command == "toggle-mute" or is_muted:
        command = wireplumber_cli(mute_cmd)
    else:
        if args.command == "increase":
            volume_cmd.append(str(args.level) + "%+")
        elif args.command == "decrease":
            volume_cmd.append(str(args.level) + "%-")
        command = wireplumber_cli(volume_cmd)
    return command, notify()


control_volume_level()


def volume_status():
    if args.command == "status":
        while True:
            print(ICON + str(percentage) + "%")
            time.sleep(60)
    else:
        return


volume_status()
